# include <stdio.h>

int main() 
{
	////정수 데이터 ( . 이 없는 숫자)

	////실수 데이터(. 이 들어있는 숫자)
	//5.0000; 123.12; -125; 0.001;
	////문자 데이터 (외 따옴표가 있는 문자 하나)
	//'A', 'a', '@', '/'
	////문자열 데이터 ( 쌍따옴표가 있는 문자(들)) // 여러 개가 될 수도 있다.
	//'H', " Hi Nice", "Good"
//====================================================

	//iny 는 자료형이다
	int number = 5;
	int number_3 = 2;
	//int 라는 타입의 값만 넣을 수 있다.
	//1. 정수 자료형
	//-----char 1byte
	//가장 작은 용량의 정수 자료형
	// 주로 문자 데이터를 담을 때 쓰임. 자세한 건 나중에 봄.
	
	// short(short int) (2바이트)
	// int 변수보다 용량을 아낄 때 쓰는 자료형  -> 좀 더 빠름
	// 
	// 
	//----int 4byte
	//일반적으로 정수 데이터를 사용할 때 쓰는 자료형 


	//long
	//long long
	
	//2. 실수 자료형
	//float 4바이트 double 보다 빠르게 실수 데이터를 연산하기 위해 쓰이는 자료형
	//double  8바이트 / 기본적으로 컴퓨터는 기본 실수로 생각한다.
// 
	//long double 16바이트  / 뒷자리까지 제대로 알아야 할 때 비쥬얼 스튜디오에선 8바이트이다.

	
	signed int num = +5;
	// 음수가 필요없는 상황일 때  음수를 표현 못하도록 자료형 자체를 unsigned int로 
	
	//char은 예외적으로 기본값이 다르다
	printf("%.6000f\n", 0.1);
	
	


	// 컴퓨터는 실수 데이터를 표현할 때
	// 부호 있는 방식으로만 표현하기 때문에 항상 signed 데이터만 존재함.
	// 그러므로 unsigned 

	sizeof(5);  // 연산자이다 바이트를 연산해주는 것

	//자료형 쓰는 이유 
	int num = 5;
	// 숫자 뒤에다가 롱 붙임


	// 매직넘버

	// int / int  = 0
	// signed char  num 2 = 127+ 1; //최소값으로 돌아가는 현상을 오버플로우 라고 함  -128 로 들어감 자물쇠 넘어가는 느낌 
	//unsigned  언더플로우 
		return 0;
}

//자료형 변수명 = 넣을_데이터;


//실수 접미사 
//float 
//float number = 3.14 F;
// 문자를 숫자로 생각하기9 인ㅇ코딩0
//128 개의 아스키 코드가 있다 
